{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/lawrencm/Projects/starterkit/apps/nextjs/packages/db/index.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\n// import { env } from \"@com/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;;AAEA,kCAAkC;AAElC,MAAM,qBAAqB,IACzB,IAAI,2GAAA,CAAA,eAAY,CAAC;QACf,KACE,uCAAyC;YAAC;YAAS;YAAS;SAAO;IACvE;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/lawrencm/Projects/starterkit/apps/nextjs/packages/api/src/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1)\n * 2. You want to create a new middleware or type of procedure (see Part 3)\n *\n * tl;dr - this is where all the tRPC server stuff is created and plugged in.\n * The pieces you will need to use are documented accordingly near the end\n */\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport type { Session } from \"@com/auth\";\nimport { auth, validateToken } from \"@com/auth\";\nimport { db } from \"@com/db\";\n\n/**\n * Isomorphic Session getter for API requests\n * - Expo requests will have a session token in the Authorization header\n * - Next.js requests will have a session token in cookies\n */\nconst isomorphicGetSession = async (headers: Headers) => {\n  const authToken = headers.get(\"Authorization\") ?? null;\n  if (authToken) return validateToken(authToken);\n  return auth();\n};\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: {\n  headers: Headers;\n  session: Session | null;\n}) => {\n  const authToken = opts.headers.get(\"Authorization\") ?? null;\n  const session = await isomorphicGetSession(opts.headers);\n\n  const source = opts.headers.get(\"x-trpc-source\") ?? \"unknown\";\n  console.log(\">>> tRPC Request from\", source, \"by\", session?.user);\n\n  return {\n    session,\n    db,\n    token: authToken,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the trpc api is initialized, connecting the context and\n * transformer\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter: ({ shape, error }) => ({\n    ...shape,\n    data: {\n      ...shape.data,\n      zodError: error.cause instanceof ZodError ? error.cause.flatten() : null,\n    },\n  }),\n});\n\n/**\n * Create a server-side caller\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these\n * a lot in the /src/server/api/routers folder\n */\n\n/**\n * This is how you create new routers and subrouters in your tRPC API\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an articifial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev 100-500ms\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthed) procedure\n *\n * This is the base piece you use to build new queries and mutations on your\n * tRPC API. It does not guarantee that a user querying is authorized, but you\n * can still access user session data if they are logged in\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n\n/**\n * Protected (authenticated) procedure\n *\n * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies\n * the session is valid and guarantees `ctx.session.user` is not null.\n *\n * @see https://trpc.io/docs/procedures\n */\nexport const protectedProcedure = t.procedure\n  .use(timingMiddleware)\n  .use(({ ctx, next }) => {\n    if (!ctx.session?.user) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n    return next({\n      ctx: {\n        // infers the `session` as non-nullable\n        session: { ...ctx.session, user: ctx.session.user },\n      },\n    });\n  });"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AACA;AAIA;AACA;AANA;AAEA;AAFA;;;;;;AAQA;;;;CAIC,GACD,MAAM,uBAAuB,OAAO;IAClC,MAAM,YAAY,QAAQ,GAAG,CAAC,oBAAoB;IAClD,IAAI,WAAW,OAAO,CAAA,GAAA,gIAAA,CAAA,gBAAa,AAAD,EAAE;IACpC,OAAO,CAAA,GAAA,gIAAA,CAAA,OAAI,AAAD;AACZ;AAcO,MAAM,oBAAoB,OAAO;IAItC,MAAM,YAAY,KAAK,OAAO,CAAC,GAAG,CAAC,oBAAoB;IACvD,MAAM,UAAU,MAAM,qBAAqB,KAAK,OAAO;IAEvD,MAAM,SAAS,KAAK,OAAO,CAAC,GAAG,CAAC,oBAAoB;IACpD,QAAQ,GAAG,CAAC,yBAAyB,QAAQ,MAAM,SAAS;IAE5D,OAAO;QACL;QACA,IAAA,uHAAA,CAAA,KAAE;QACF,OAAO;IACT;AACF;AAEA;;;;;CAKC,GACD,MAAM,IAAI,qSAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,gMAAA,CAAA,UAAS;IACtB,gBAAgB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,GAAK,CAAC;YACrC,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UAAU,MAAM,KAAK,YAAY,qLAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YACtE;QACF,CAAC;AACH;AAMO,MAAM,sBAAsB,EAAE,mBAAmB;AAajD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,oCAAoC;QACpC,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AAUxC,MAAM,qBAAqB,EAAE,SAAS,CAC1C,GAAG,CAAC,kBACJ,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE;IACjB,IAAI,CAAC,IAAI,OAAO,EAAE,MAAM;QACtB,MAAM,IAAI,+SAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAe;IAC7C;IACA,OAAO,KAAK;QACV,KAAK;YACH,uCAAuC;YACvC,SAAS;gBAAE,GAAG,IAAI,OAAO;gBAAE,MAAM,IAAI,OAAO,CAAC,IAAI;YAAC;QACpD;IACF;AACF"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///Users/lawrencm/Projects/starterkit/apps/nextjs/packages/api/src/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport {\n  createTRPCRouter,\n  // protectedProcedure,\n  publicProcedure,\n} from \"../trpc\";\n\nexport const postRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n\n  create: publicProcedure\n    .input(z.object({ name: z.string().min(1) }))\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.post.create({\n        data: {\n          name: input.name,\n          createdBy: { connect: { id: ctx.session.user.id } },\n        },\n      });\n    }),\n\n  getLatest: publicProcedure.query(async ({ ctx }) => {\n    const post = await ctx.db.post.findFirst({\n      orderBy: { createdAt: \"desc\" },\n      where: { createdBy: { id: ctx.session.user.id } },\n    });\n\n    return post ?? null;\n  }),\n\n  getSecretMessage: publicProcedure.query(() => {\n    return \"you can now see this secret message!\";\n  }),\n});\n"],"names":[],"mappings":";;;AAEA;AAFA;;;AAQO,MAAM,aAAa,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,OAAO,8HAAA,CAAA,kBAAe,CACnB,KAAK,CAAC,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,qLAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE;QACjC;IACF;IAEF,QAAQ,8HAAA,CAAA,kBAAe,CACpB,KAAK,CAAC,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAAG,IACzC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,MAAM;gBACJ,MAAM,MAAM,IAAI;gBAChB,WAAW;oBAAE,SAAS;wBAAE,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;oBAAC;gBAAE;YACpD;QACF;IACF;IAEF,WAAW,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC7C,MAAM,OAAO,MAAM,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,SAAS;gBAAE,WAAW;YAAO;YAC7B,OAAO;gBAAE,WAAW;oBAAE,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;gBAAC;YAAE;QAClD;QAEA,OAAO,QAAQ;IACjB;IAEA,kBAAkB,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC;QACtC,OAAO;IACT;AACF"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///Users/lawrencm/Projects/starterkit/apps/nextjs/packages/api/src/root.ts"],"sourcesContent":["\nimport { postRouter } from \"./routers/post\";\nimport { createCallerFactory, createTRPCRouter } from \"./trpc\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  post: postRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AACA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,yIAAA,CAAA,aAAU;AAClB;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["file:///Users/lawrencm/Projects/starterkit/apps/nextjs/packages/api/src/index.ts"],"sourcesContent":["import type { inferRouterInputs, inferRouterOutputs } from \"@trpc/server\";\n\nimport type { AppRouter } from \"./root\";\nimport { appRouter } from \"./root\";\nimport { createCallerFactory, createTRPCContext } from \"./trpc\";\n\n/**\n * Create a server-side caller for the tRPC API\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nconst createCaller = createCallerFactory(appRouter);\n\n/**\n * Inference helpers for input types\n * @example\n * type PostByIdInput = RouterInputs['post']['byId']\n *      ^? { id: number }\n **/\ntype RouterInputs = inferRouterInputs<AppRouter>;\n\n/**\n * Inference helpers for output types\n * @example\n * type AllPostsOutput = RouterOutputs['post']['all']\n *      ^? Post[]\n **/\ntype RouterOutputs = inferRouterOutputs<AppRouter>;\n\nexport { createTRPCContext, appRouter, createCaller };\nexport type { AppRouter, RouterInputs, RouterOutputs };"],"names":[],"mappings":";;;AAIA;AADA;;;AAGA;;;;;;CAMC,GACD,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE,8HAAA,CAAA,YAAS"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/lawrencm/Projects/starterkit/apps/nextjs/apps/nextjs/src/trpc/query-client.ts"],"sourcesContent":["import {\n  defaultShouldDehydrateQuery,\n  QueryClient,\n} from \"@tanstack/react-query\";\nimport SuperJSON from \"superjson\";\n\nexport const createQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        // With SSR, we usually want to set some default staleTime\n        // above 0 to avoid refetching immediately on the client\n        staleTime: 30 * 1000,\n      },\n      dehydrate: {\n        serializeData: SuperJSON.serialize,\n        shouldDehydrateQuery: (query) =>\n          defaultShouldDehydrateQuery(query) ||\n          query.state.status === \"pending\",\n      },\n      hydrate: {\n        deserializeData: SuperJSON.deserialize,\n      },\n    },\n  });\n"],"names":[],"mappings":";;;AAIA;AAJA;AAAA;;;AAMO,MAAM,oBAAoB,IAC/B,IAAI,sPAAA,CAAA,cAAW,CAAC;QACd,gBAAgB;YACd,SAAS;gBACP,0DAA0D;gBAC1D,wDAAwD;gBACxD,WAAW,KAAK;YAClB;YACA,WAAW;gBACT,eAAe,gMAAA,CAAA,UAAS,CAAC,SAAS;gBAClC,sBAAsB,CAAC,QACrB,CAAA,GAAA,oPAAA,CAAA,8BAA2B,AAAD,EAAE,UAC5B,MAAM,KAAK,CAAC,MAAM,KAAK;YAC3B;YACA,SAAS;gBACP,iBAAiB,gMAAA,CAAA,UAAS,CAAC,WAAW;YACxC;QACF;IACF"}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///Users/lawrencm/Projects/starterkit/apps/nextjs/apps/nextjs/src/trpc/server.ts"],"sourcesContent":["import \"server-only\";\n\nimport { createHydrationHelpers } from \"@trpc/react-query/rsc\";\nimport { headers } from \"next/headers\";\nimport { cache } from \"react\";\nimport { type AppRouter, createCaller, createTRPCContext } from \"@com/api\";\nimport { createQueryClient } from \"./query-client\";\n\n// import { createCaller, type AppRouter } from \"@com/server/api/root\";\n// import { createTRPCContext } from \"@com/server/api/trpc\";\n// import { createQueryClient } from \"./query-client\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a tRPC call from a React Server Component.\n */\nconst createContext = cache(async () => {\n  const heads = new Headers(await headers());\n  heads.set(\"x-trpc-source\", \"rsc\");\n\n  return createTRPCContext({\n    headers: heads,\n  });\n});\n\nconst getQueryClient = cache(createQueryClient);\nconst caller = createCaller(createContext);\n\nexport const { trpc: api, HydrateClient } = createHydrationHelpers<AppRouter>(\n  caller,\n  getQueryClient,\n);\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAAA;;;;;;;AAGA,uEAAuE;AACvE,4DAA4D;AAC5D,sDAAsD;AAEtD;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,oUAAA,CAAA,QAAK,AAAD,EAAE;IAC1B,MAAM,QAAQ,IAAI,QAAQ,MAAM,CAAA,GAAA,8PAAA,CAAA,UAAO,AAAD;IACtC,MAAM,GAAG,CAAC,iBAAiB;IAE3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS;IACX;AACF;AAEA,MAAM,iBAAiB,CAAA,GAAA,oUAAA,CAAA,QAAK,AAAD,EAAE,gJAAA,CAAA,oBAAiB;AAC9C,MAAM,SAAS,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE;AAErB,MAAM,EAAE,MAAM,GAAG,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,+WAAA,CAAA,yBAAsB,AAAD,EAC/D,QACA"}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file:///Users/lawrencm/Projects/starterkit/apps/nextjs/apps/nextjs/src/app/page.tsx"],"sourcesContent":["import Link from \"next/link\";\n\n// import { LatestPost } from \"./_components/post\";\nimport { api, HydrateClient } from \"../trpc/server\";\n// import { auth } from \"@com/auth\";\n\nexport default async function Home() {\n  const hello = await api.post.hello({ text: \"from tRPC xx\" });\n  // const session = (await auth()) ?? null;\n\n  // if (session?.user) {\n  //   void api.post.getLatest.prefetch();\n  // }\n\n  return (\n    <HydrateClient>\n      <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white\">\n        <div className=\"container flex flex-col items-center justify-center gap-12 px-4 py-16\">\n          <h1 className=\"text-5xl font-extrabold tracking-tight sm:text-[5rem]\">\n            Create <span className=\"text-[hsl(280,100%,70%)]\">T3</span> App\n          </h1>\n          <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8\">\n            <Link\n              className=\"flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 hover:bg-white/20\"\n              href=\"https://create.t3.gg/en/usage/first-steps\"\n              target=\"_blank\"\n            >\n              <h3 className=\"text-2xl font-bold\">First Steps →</h3>\n              <div className=\"text-lg\">\n                Just the basics - Everything you need to know to set up your\n                database and authentication.\n              </div>\n            </Link>\n            <Link\n              className=\"flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 hover:bg-white/20\"\n              href=\"https://create.t3.gg/en/introduction\"\n              target=\"_blank\"\n            >\n              <h3 className=\"text-2xl font-bold\">Documentation →</h3>\n              <div className=\"text-lg\">\n                Learn more about Create T3 App, the libraries it uses, and how\n                to deploy it.\n              </div>\n            </Link>\n          </div>\n          <div className=\"flex flex-col items-center gap-2\">\n            <p className=\"text-2xl text-white\">\n              {hello ? hello.greeting : \"Loading tRPC query...\"}\n            </p>\n\n            <div className=\"flex flex-col items-center justify-center gap-4\">\n              <p className=\"text-center text-2xl text-white\">\n                {/* {session && <span>Logged in as {session.user?.name}</span>} */}\n              </p>\n              {/* <Link\n                href={session ? \"/api/auth/signout\" : \"/api/auth/signin\"}\n                className=\"rounded-full bg-white/10 px-10 py-3 font-semibold no-underline transition hover:bg-white/20\"\n              >\n                {session ? \"Sign out\" : \"Sign in\"}\n              </Link> */}\n            </div>\n          </div>\n\n          {/* {session?.user && <LatestPost />} */}\n        </div>\n      </main>\n    </HydrateClient>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AAEA,mDAAmD;AACnD;;;;AAGe,eAAe;IAC5B,MAAM,QAAQ,MAAM,uIAAA,CAAA,MAAG,CAAC,IAAI,CAAC,KAAK,CAAC;QAAE,MAAM;IAAe;IAC1D,0CAA0C;IAE1C,uBAAuB;IACvB,wCAAwC;IACxC,IAAI;IAEJ,qBACE,6WAAC,uIAAA,CAAA,gBAAa;kBACZ,cAAA,6WAAC;YAAK,WAAU;sBACd,cAAA,6WAAC;gBAAI,WAAU;;kCACb,6WAAC;wBAAG,WAAU;;4BAAwD;0CAC7D,6WAAC;gCAAK,WAAU;0CAA2B;;;;;;4BAAS;;;;;;;kCAE7D,6WAAC;wBAAI,WAAU;;0CACb,6WAAC,2PAAA,CAAA,UAAI;gCACH,WAAU;gCACV,MAAK;gCACL,QAAO;;kDAEP,6WAAC;wCAAG,WAAU;kDAAqB;;;;;;kDACnC,6WAAC;wCAAI,WAAU;kDAAU;;;;;;;;;;;;0CAK3B,6WAAC,2PAAA,CAAA,UAAI;gCACH,WAAU;gCACV,MAAK;gCACL,QAAO;;kDAEP,6WAAC;wCAAG,WAAU;kDAAqB;;;;;;kDACnC,6WAAC;wCAAI,WAAU;kDAAU;;;;;;;;;;;;;;;;;;kCAM7B,6WAAC;wBAAI,WAAU;;0CACb,6WAAC;gCAAE,WAAU;0CACV,QAAQ,MAAM,QAAQ,GAAG;;;;;;0CAG5B,6WAAC;gCAAI,WAAU;0CACb,cAAA,6WAAC;oCAAE,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiB3B"}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}